#!/usr/bin/env node

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

"use strict";

var home = "@quiver_home@";

if (process.env.hasOwnProperty("QUIVER_HOME")) {
    home = process.env.QUIVER_HOME;
}

var rhea = require(home + "/javascript/node_modules/rhea");
var types = require(home + "/javascript/node_modules/rhea/lib/types.js");

if (process.argv.length === 2) {
    var data = require(home + "/javascript/node_modules/rhea/package.json");
    process.stdout.write("Rhea " + data.version + "\n");
    process.exit(0);
}

var container = rhea.create_container({id: process.argv[5]});

var connection_mode = process.argv[2];
var channel_mode = process.argv[3];
var operation = process.argv[4];
var host = process.argv[6];
var port = process.argv[7];
var path = process.argv[8];
var seconds = 10 // XXX
var messages = process.argv[9];
var body_size = process.argv[10];
var credit_window = process.argv[11];
var transaction_size = process.argv[12];

var flags = process.argv[13].split(",");

var durable = flags.indexOf("durable") > -1;

var a = new Array(body_size);

for (var i = 0; i < a.length; i++) {
    a[i] = 120;
}

var body = types.wrap_binary(new Uint8Array(a));

var start_time;
var sent = 0;
var received = 0;
var accepted = 0;

var listener;

function eprint(message) {
    process.stderr.write("quiver-arrow: error: ");
    process.stderr.write(message);
    process.stderr.write("\n");
}

var buffer = new Buffer(5120);
var offset = 0;

function flush() {
    if (offset) {
        process.stdout.write(buffer.toString('ascii', 0, offset));
        offset = 0;
    }
}

function log(message) {
    if (offset + message.length >= buffer.length) {
        flush();
    }
    buffer.write(message, offset, message.length, 'ascii');
    offset += message.length;
}

function close(context) {
    if (connection_mode == "client") {
        context.connection.close();
    } else if (connection_mode == "server") {
        listener.close();
    } else {
        throw new Error();
    }
}

container.on("connection_close", function(context) {
    flush();
});

container.on("connection_open", function(context) {
    if (channel_mode == "passive") {
        return;
    }

    if (operation == "send") {
        var options = {
            target: {
                address: path,
                durable: false
            }
        };

        context.connection.open_sender(options);
    } else if (operation == "receive") {
        var options = {
            source: {
                address: path,
                durable: false
            },
            prefetch: credit_window
        };

        context.connection.open_receiver(options);
    } else {
        throw new Error();
    }
});

container.on("sendable", function(context) {
    while (context.sender.sendable() && sent < messages) {
        var id = sent + 1;
        var stime = types.wrap_long(new Date().getTime());

        var message = {
            id: id,
            application_properties: {
                SendTime: stime
            },
            durable: durable,
            body: body,
        };

        context.sender.send(message);

        log(message.id + "," + stime + "\n");

        sent++;
    }
});

container.on("accepted", function(context) {
    accepted++;

    if (accepted == messages) {
        close(context);
    }

    if (accepted % 1000 == 0 && new Date().getTime() - start_time >= seconds * 1000) { // XXX
        close(context);
    }
});

container.on("message", function(context) {
    var message = context.message;
    var rtime = new Date().getTime();
    var stime = message.application_properties.SendTime;

    log(message.id + "," + stime + "," + rtime + "\n");

    received++;

    if (received == messages) {
        close(context);
    }

    if (received % 1000 == 0 && new Date().getTime() - start_time >= seconds * 1000) { // XXX
        close(context);
    }
});

if (transaction_size > 0) {
    eprint("This impl doesn't support transactions");
    process.exit(1);
}

start_time = new Date().getTime();

if (connection_mode == "client") {
    container.connect({username: "anonymous", host: host, port: port});
} else if (connection_mode == "server") {
    container.sasl_server_mechanisms.enable_anonymous();
    // XXX listener = container.listen({host: host, port: port});
    listener = container.listen({port: port});
} else {
    throw new Error();
}
